{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WrappedMap","withScriptjs","withGoogleMap","mapRef","useRef","useState","error","setError","isLoaded","setIsLoaded","items","setItems","zones","setZones","zoom","setZoom","useEffect","Promise","all","map","url","fetch","then","res","json","markers","geoJSON","data","geometry","coordinates","zone","lng","lat","message","ref","defaultCenter","item","i","icon","iconUrl","position","parseFloat","latitude","longitude","onClick","marker","current","panTo","window","google","maps","LatLng","latLng","path","options","strokeColor","strokeOpacity","strokeWeight","icons","offset","repeat","App","className","style","width","height","googleMapURL","process","loadingElement","containerElement","mapElement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"iQA+FA,IAAMA,EAAaC,uBAAaC,yBArFhC,WACE,IAAMC,EAASC,iBAAO,MADT,EAEaC,mBAAS,MAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,oBAAS,GAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIaJ,mBAAS,IAJtB,mBAINK,EAJM,KAICC,EAJD,OAKaN,mBAAS,IALtB,mBAKNO,EALM,KAKCC,EALD,OAMWR,mBAAS,IANpB,mBAMNS,EANM,KAMAC,EANA,KAgCb,OAxBAC,qBAAU,WACRC,QAAQC,IACN,CACE,6CACA,gDACAC,KAAI,SAACC,GAAD,OAASC,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAASA,EAAIC,cAC5CF,MACA,YAAyB,IAAD,mBAAtBG,EAAsB,KAAbC,EAAa,KACtBjB,GAAY,GACZE,EAASc,GACTZ,EACEa,EAAQC,KAAKC,SAASC,YAAYV,KAAI,SAACW,GAAD,OACpCA,EAAKX,KAAI,mCAAEY,EAAF,WAAiB,CAAEC,IAAnB,KAAwBD,iBAKvC,SAACzB,GACCG,GAAY,GACZF,EAASD,QAGZ,IAECA,EACK,0CAAaA,EAAM2B,WAChBzB,EAIR,eAAC,YAAD,CACE0B,IAAK/B,EACLW,KAAMA,EACNqB,cAAe,CAAEH,KAAM,UAAWD,IAAK,YAHzC,UAKGrB,EAAMS,KAAI,SAACiB,EAAMC,GAAP,OACT,cAAC,SAAD,CAEEC,KAAMF,EAAKG,QACXC,SAAU,CACRR,IAAKS,WAAWL,EAAKI,SAASE,UAC9BX,IAAKU,WAAWL,EAAKI,SAASG,YAEhCC,QAAS,SAACC,GACR1C,EAAO2C,QAAQC,MACb,IAAIC,OAAOC,OAAOC,KAAKC,OACrBN,EAAOO,OAAOpB,MACda,EAAOO,OAAOrB,QAGlBhB,EAAQ,MAbLsB,MAkBRzB,EAAMO,KAAI,SAACW,EAAMO,GAAP,OACT,cAAC,UAAD,CAEEgB,KAAMvB,EACNwB,QAAS,CACPC,YAAa,UACbC,cAAe,EACfC,aAAc,EACdC,MAAO,CACL,CACEpB,KAAM,QACNqB,OAAQ,IACRC,OAAQ,WAVTvB,SA9BN,iDAoDI,SAASwB,IACvB,OACE,qBAAKC,UAAU,SAAf,SACA,qBAAKA,UAAU,MAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAtD,SACC,cAACjE,EAAD,CAAYkE,aAAY,gGACtBC,2CAEFC,eAAgB,qBAAKL,MAAO,CAAEE,OAAQ,UACtCI,iBAAkB,qBAAKN,MAAO,CAAEE,OAAQ,UACxCK,WAAY,qBAAKP,MAAO,CAAEE,OAAQ,gBC1GtC,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.97089999.chunk.js","sourcesContent":["import \"./App.css\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  Polygon\n} from \"react-google-maps\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [zoom, setZoom] = useState(14);\n\n  useEffect(() => {\n    Promise.all(\n      [\n        \"https://api.mevo.co.nz/public/vehicles/all\",\n        \"https://api.mevo.co.nz/public/home-zones/all\"\n      ].map((url) => fetch(url).then((res) => res.json()))\n    ).then(\n      ([markers, geoJSON]) => {\n        setIsLoaded(true);\n        setItems(markers);\n        setZones(\n          geoJSON.data.geometry.coordinates.map((zone) =>\n            zone.map(([lng, lat]) => ({ lat, lng }))\n          )\n        );\n      },\n\n      (error) => {\n        setIsLoaded(true);\n        setError(error);\n      }\n    );\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <GoogleMap\n        ref={mapRef}\n        zoom={zoom}\n        defaultCenter={{ lat: -41.292757, lng: 174.790984 }}\n      >\n        {items.map((item, i) => (\n          <Marker\n            key={i}\n            icon={item.iconUrl}\n            position={{\n              lat: parseFloat(item.position.latitude),\n              lng: parseFloat(item.position.longitude)\n            }}\n            onClick={(marker) => {\n              mapRef.current.panTo(\n                new window.google.maps.LatLng(\n                  marker.latLng.lat(),\n                  marker.latLng.lng()\n                )\n              );\n              setZoom(16);\n            }}\n          />\n        ))}\n\n        {zones.map((zone, i) => (\n          <Polygon\n            key={i}\n            path={zone}\n            options={{\n              strokeColor: \"#fc1e0d\",\n              strokeOpacity: 1,\n              strokeWeight: 2,\n              icons: [\n                {\n                  icon: \"hello\",\n                  offset: \"0\",\n                  repeat: \"10px\"\n                }\n              ]\n            }}\n          />\n        ))}\n      </GoogleMap>\n    );\n  }\n}\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default function App() {\n return (\n   <div className=\"header\">\n   <div className=\"map\" style={{ width: '100vw', height: '100vh'}}>\n    <WrappedMap googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${\n      process.env.REACT_APP_GOOGLE_KEY\n    }`}\n    loadingElement={<div style={{ height: \"100%\" }} />}\n    containerElement={<div style={{ height: \"100%\" }} />}\n    mapElement={<div style={{ height: \"100%\" }} />}\n    />\n  </div>\n  </div>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}